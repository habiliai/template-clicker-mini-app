/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TasksTaskIdImport } from './routes/tasks/$taskId'

// Create Virtual Routes

const FrensLazyImport = createFileRoute('/frens')()
const EarnLazyImport = createFileRoute('/earn')()
const BoostsLazyImport = createFileRoute('/boosts')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const FrensLazyRoute = FrensLazyImport.update({
  id: '/frens',
  path: '/frens',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/frens.lazy').then((d) => d.Route))

const EarnLazyRoute = EarnLazyImport.update({
  id: '/earn',
  path: '/earn',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/earn.lazy').then((d) => d.Route))

const BoostsLazyRoute = BoostsLazyImport.update({
  id: '/boosts',
  path: '/boosts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/boosts.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const TasksTaskIdRoute = TasksTaskIdImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/boosts': {
      id: '/boosts'
      path: '/boosts'
      fullPath: '/boosts'
      preLoaderRoute: typeof BoostsLazyImport
      parentRoute: typeof rootRoute
    }
    '/earn': {
      id: '/earn'
      path: '/earn'
      fullPath: '/earn'
      preLoaderRoute: typeof EarnLazyImport
      parentRoute: typeof rootRoute
    }
    '/frens': {
      id: '/frens'
      path: '/frens'
      fullPath: '/frens'
      preLoaderRoute: typeof FrensLazyImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$taskId': {
      id: '/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof TasksTaskIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/boosts': typeof BoostsLazyRoute
  '/earn': typeof EarnLazyRoute
  '/frens': typeof FrensLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/boosts': typeof BoostsLazyRoute
  '/earn': typeof EarnLazyRoute
  '/frens': typeof FrensLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/boosts': typeof BoostsLazyRoute
  '/earn': typeof EarnLazyRoute
  '/frens': typeof FrensLazyRoute
  '/tasks/$taskId': typeof TasksTaskIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/boosts' | '/earn' | '/frens' | '/tasks/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/boosts' | '/earn' | '/frens' | '/tasks/$taskId'
  id: '__root__' | '/' | '/boosts' | '/earn' | '/frens' | '/tasks/$taskId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  BoostsLazyRoute: typeof BoostsLazyRoute
  EarnLazyRoute: typeof EarnLazyRoute
  FrensLazyRoute: typeof FrensLazyRoute
  TasksTaskIdRoute: typeof TasksTaskIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  BoostsLazyRoute: BoostsLazyRoute,
  EarnLazyRoute: EarnLazyRoute,
  FrensLazyRoute: FrensLazyRoute,
  TasksTaskIdRoute: TasksTaskIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/boosts",
        "/earn",
        "/frens",
        "/tasks/$taskId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/boosts": {
      "filePath": "boosts.lazy.tsx"
    },
    "/earn": {
      "filePath": "earn.lazy.tsx"
    },
    "/frens": {
      "filePath": "frens.lazy.tsx"
    },
    "/tasks/$taskId": {
      "filePath": "tasks/$taskId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
